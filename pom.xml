<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.github.sellersj</groupId>
  <artifactId>hello-world-javafx-jpackage</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <name>hello world javafx jpackage example</name>
  <description>A tool to demonstrate a javaFX using native packaging</description>
  <packaging>jar</packaging>
  <properties>
    <maven.compiler.source>21</maven.compiler.source>
    <maven.compiler.target>21</maven.compiler.target>
    <maven.compiler.showDeprecation>true</maven.compiler.showDeprecation>
    <maven.compiler.showWarnings>true</maven.compiler.showWarnings>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <junit.version>5.10.1</junit.version>
    <javafx.version>21.0.1</javafx.version>
    <jpackage.input>${project.build.directory}/jpackage-input</jpackage.input>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-controls</artifactId>
      <version>${javafx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>3.2.3</version>
          <configuration>
            <runOrder>hourly</runOrder>
            <!-- Activate the use of TCP to transmit events to the plugin -->
            <forkNode
              implementation="org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory" />
          </configuration>
        </plugin>
        <plugin>
          <groupId>com.github.akman</groupId>
          <artifactId>jpackage-maven-plugin</artifactId>
          <version>0.1.5</version>
          <configuration>
            <name>${project.artifactId}</name>
            <!-- verison cannot contain -SNAPSHOT and must be 3 digits -->
            <!--            <appversion>${project.version}</appversion>-->
            <appversion>1.0.0</appversion>

            <description>${project.description}</description>

            <!-- default of PLATFORM does not work on macos -->
            <type>IMAGE</type>

            <!-- TODO put the jar and any needed libraries into a folder for the
            'input' but not everything -->
            <input>${jpackage.input}</input>

            <verbose>true</verbose>

            <!-- TODO fix this to be a more generic solution -->
            <!-- set this since on macos it does weird things with the path -->
            <!--            <toolhome>$‚Äç{env.JAVA_HOME}</toolhome>-->
            <!--
            <toolhome>/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Home</toolhome>-->


            <!--
                Specifies the main module (and optionally main class) of
                the application. This module must be located on the module path.
                When this option is specified, the main module will be linked
                in the Java runtime image.
                Either module or main-jar option can be specified
                but not both.
              -->
            <!--
            <module>${project.artifactId}/com.example.jpackagejavafx.HelloWorld</module>-->

            <mainjar>
              ${project.build.directory}/${project.build.finalName}.${project.packaging}</mainjar>
            <mainclass>com.example.jpackagejavafx.HelloWorld</mainclass>

            <javaoptions>-Dfile.encoding=UTF-8 -Xms256m -Xmx512m</javaoptions>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-toolchains-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <toolchains>
            <jdk>
              <version>${maven.compiler.source}</version>
            </jdk>
          </toolchains>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>toolchain</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.6.1</version>
        <executions>
          <execution>
            <id>copy-dependencies-to-jpackage-output</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <includeScope>compile</includeScope>
              <outputDirectory>${jpackage.input}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- TODO think about refactoring this with dependency:copy -->
      <plugin>
        <groupId>com.coderplus.maven.plugins</groupId>
        <artifactId>copy-rename-maven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>copy-file</id>
            <phase>verify</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <sourceFile>
                ${project.build.directory}/${project.build.finalName}.${project.packaging}</sourceFile>
              <destinationFile>
                ${jpackage.input}/${project.build.finalName}.${project.packaging}</destinationFile>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.github.akman</groupId>
        <artifactId>jpackage-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>jpackage-image</id>
            <phase>verify</phase>
            <goals>
              <goal>jpackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
